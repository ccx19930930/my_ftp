###########################################################################


1.服务器用脚本启动,使用Makefile编译之后,运行server.sh
  可执行文件在bin文件夹中,客户端的可拷进其它文件进行测试
  客户端启动方式: ./client ip port
  include存放头文件
  src存放源代码
  conf存放配置文件
  files文件夹为服务器文件夹,存放所有"网盘文件"
2.一期功能全部用mysql实现(字符串拼接)
3.哈希表管理用户
      密码验证通过后,所有需要的数据存入结构体数组中,new_fd为相应数组下标
4.断点续传,上传与下载都可应用
5.多用户同时上传一个MD5码相同的文件时,轮流上传至同一文件中
6.登陆验证由mysql实现,但是还没有加密,暂时不支持注册
7.正在开发:上传与下载文件夹及里面的所有内容
           密码加密
           客户端界面
           p2p(后面有模型)
           其它功能
8.服务器结构:


        +-------------------------------------------+
        |           主      线      程              |    
        +-------------------------------------------+
                            |
                            |
                         +--+--+
                         |读取 |
                         |配置 |
                         |文件 |
                         |并且 |
                         |初始 |
                         |化   |
                         +--+--+
                            |
                            |
                         +--+--+
                         |监听 |                        连接  验证帐号密码
                         +--+--+
                            |
        +-------------------+-----------------------+       任务平均分配
        |                   |                       |       如:
        |                   |                       |       主线程接到15
      +-+-+               +-+-+                   +-+-+     个连接,共开了
      |服 |               |服 |                   |服 |     3个服务线程,
      |务 |               |务 |                   |务 |     每个线程分到
      |线 |               |线 |                   |线 |     3个new_fd
      |程 |               |程 |                   |程 |
      |1  |               |2  |                   |n  |
      +---+               +-+-+                   +---+
                            |                                   除了上传
                            |                                   与下载,
       +------+------+------+------+------+------+------+       其它功能
       |      |      |      |      |      |      |      |       在服务线
       |      |      |      |      |      |      |      |       程中直接
    +--+--++--+--++--+--++--+--++--+--++--+--++--+--++--+--+    查询数据
    | 下  || 下  || 下  || 下  || 上  || 上  || 上  || 上  |    库响应.
    | 载  || 载  || 载  || 载  || 传  || 传  || 传  || 传  |    上传与下
    | 线  || 线  || 线  || 线  || 线  || 线  || 线  || 线  |    载采用
    | 线  || 程  || 程  || 程  || 程  || 程  || 程  || 程  |    "时间轮
    | 1   || 2   || ... || n   || 1   || 2   || ... || n   |    转下载/
    +-----++-----++-----++-----++-----++-----++-----++-----+    上传"
                                                                的方式

9.下载/上传模式
       
    下载/上传队列:

        
        
        phead                                         ptail     (ptail)
       +======+     +=====+    +=====+    +=====+    +=====+    +-----+
       |头结点|====>|任务1|===>|任务2|===>|任务3|===>|任务4|--->|任务1|
       +======+     +=====+    +=====+    +=====+    +=====+    +-----+
                       |                                          ^
                       |                                          |
                       |                                          |
                       +--->出队列----->发送64kb----->入队列------+



10.mysql表结构

+----+-------+----------+
| id |  user | password |
+----+------+-----------+
|  1 | 用户名|   密 码  |
+----+-------+----------+
  |
  |
  +-----+
        |
        |
+----+------+------+----------+
| no | user | file | sub_file |
+----+------+------+----------+
|  1 |    1 |    6 |        1 |
|  . |    . |    . |        . |
|  . |    . |    . |        . |
|  . |    . |    . |        . |
| 21 |    1 |    1 |       24 |
| 26 |    1 |    1 |       26 |
+----+------+------+----------+
               |        |
               |        |
               +----+---+
                    |
                    |
   +----------------+
   |
   |
+----+------------+----------------------------------+
| id | pathname   | MD5                              |
+----+------------+----------------------------------+
|  1 | test       | N(表示文件夹)                    |
|  2 | music      | N                                |
|  3 | picture    | N                                |
|  . |   .        |      .                           |
|  . |   .        |      .                           |
|  . |   .        |      .                           |
| 23 | head.h     | 68b2c84b0c929fdab739e81158ec8f55 |
| 24 | 1.cskaoyan | 0cdaeab9f6d3e6731877f7572bbb1e11 |
| 26 | 2.cskaoyan | 864e33980ec52536f044b8d494bd6289 |
+----+------------+----------------------------------+




11.哈希表结构体数组成员 


typedef struct user_struct
{
    int sfd;//new_fd  同时作为数组下标
    struct in_addr ip;//IP
    char user[32];//用户名
    char user_id[4];//存放数据库中users的id
    char pwd[1024];//当前路径
    char pwd_id[4];//存放数据库中files的id
    char lastpwd[1024];//存放上一次访问的目录
    char lastid[4];//存放上一次访问的目录id
    int fdw;//管道读端
}user,*puser;


12.文件丢包模式结构体

typedef struct//小火车
{
    unsigned int len;
    char buf[1024];
}data;

typedef struct send_file_queue
{
    int sfd;//扔给谁的包or谁扔过来的包
    int fd;//要扔的文件描述符
    off_t seek;//当前位置
    int num;//扔多少(本程序全是64kb)
    struct send_file_queue *pnext;//下个包
}file_queue,*p_file_queue;

typedef struct //队列
{
    p_file_queue phead;
    p_file_queue ptail;
}file_queue_type;


13.配置文件内容

#port 2000//端口号
#listen_num 10//最大监听数
#pthread_num 1//服务线程数
#download_num 1//下载线程数 
#upload_num 1//上传线程数 
    

14.pwd

epoll触发,提取evs[i].data.fd,为哈希表下标,可以取出对应结构体中当前路径


15.mkdir

mysql   data表插入


16.ls

mysql   data表与files表左外连接查询


17.remove

mysql   data表删除行


18.cd

字符串处理&mysql DQL
例:
    cd test/note/
    客户端先处理命令,把字符串最后的'\'与所有' '转化为'\0';
    服务器接收要cd到的目录,用strchr分解字符串,提取第一个'\'前面的字符串,然后进行判断,如果是".",则直接忽略;如果是如"test",则进行files表与data表左外连接查询;如果是"..",则提取哈希表中数据的当前路径中,最后一个'/'后面的字符串,置0,之后提取倒数第二个字符串进行查找
    如果用户要cd的目录为"-",则反回上一级目录
    以上步骤成功后均要更改当前路径id,失败直接通知客户端


19.puts

客户端提取文件MD5码发送给服务器-->服务器接收-->查找files表,如果无此数据则补上-->查找data表,无对应数据则补上
-->用stat查询文件信息,返回-1说明服务器无此文件,需要从头上传;如果有此文件但是不完全,则要断点续传
-->通知客户端结果,若要上传,则用第9条的模型进行轮流上转;



20.gets

客户端申请文件-->服务器接收申请-->data表与files表左外连接查询,判断客户在该当前目录是否有此文件
-->客户端查看本地是否有此文件,如果有,则传送断点位置-->时间轮转下载



21.预计的p2p模型

                  +==============================+
                  |   服         务         器   |
                  +==============================+
                                    |        ^
           2.    192.168.1.113有    |        |1.请求文件
                                    |        |
                                    |    +---+---+
                                    +--->|客户端 |192.168.1.114
                                         +-------+
                                             |
                    +------+                 |3.udp请求
                    |客户端|<----------------+
                    +------+
                  192.168.1.113





